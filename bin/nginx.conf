# nginx server configuration

# Upstream to abstract backend connection(s) for Python-django
upstream django {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response.
    server  localhost:8001;
}

# Upstream to abstract backend connections(s) for PHP
upstream php-fpm {
    # this should match value of "listen" directive in php-fpm pool
    #server unix:/var/run/php-fpm.sock;
    server 127.0.0.1:8002;
}

server {
    listen [::]:80;
    server_name localhost *.localhost;

    keepalive_timeout 5;
    client_max_body_size 4G;

    access_log /home/sheoranjs24/Projects/beLocal/logs/beLocal.access.log;
    error_log /home/sheoranjs24/Projects/beLocal/logs/beLocal.error.log;

    root /home/sheoranjs24/Projects/beLocal/src/client/app;
    index index.html;

    location / {
        #try_files $uri $uri/index.html @django;
        # use /api/ for passing requests to django
        try_files $uri $uri/ =404; 
    }

    # REST API URLs
    location /api/ {
        try_files $uri $uri/ @django;
        include     uwsgi_params;
    }

    # Turn this on, if you want URLs with /blog/
    #location /blog/ {
    #    rewrite /blog/ /wordpress/ last;
    #}

    # Wordpress URLs
    location /wordpress {
        root /home/sheoranjs24/Projects/beLocal/src;
        #include /home/sheoranjs24/Projects/beLocal/bin/wpsecure.conf;
        #include /home/sheoranjs24/Projects/beLocal/bin/wpnocache.conf;

        index index.php;
        try_files $uri $uri/ /index.php?$is_args$args; 

        # Use fastcgi for PHP files
        location ~ [^/]\.php(/|$) {

            #Note: Make sure "cgi.fix_pathinfo=0;" in php.ini file.
            fastcgi_split_path_info  ^((?U).+?\.php)(/?.+)$; # ^\/blog\/(.+\.php)(/.*)$;

            # try_files will work if php-fpm and nginx are on same server
            try_files $fastcgi_script_name =404;

            include /etc/nginx/fastcgi_params;
            fastcgi_index index.php;
            #set $wtf $fastcgi_path_info;
            #fastcgi_param PATH_INFO $wtf;

            fastcgi_intercept_errors on;
            fastcgi_pass php-fpm;
        }
    }

    # API URLs
    location @django {
        # http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;
 
        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;
 
        proxy_set_header   X-Real-IP        $remote_addr;
        
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
 
        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://django; 
            break;
        }
    }
    
    location /static/ {
        alias /home/sheoranjs24/Projects/beLocal/static/;
    }
    
    location /media/ {
        alias /home/sheoranjs24/Projects/beLocal/static/media/;
    }
    
    # Error pages
#    error_page 500 502 503 504 /404.html;
#    location = /404.html {
#        root /home/sheoranjs24/Projects/beLocal/src/client/app;
#    }
}

# For local testing
server {
	listen localhost:9001;
	server_name gunicorn;

	client_max_body_size 20m;

	location / {
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header Host $http_host;
		#proxy_set_header X-Forwarded-Protocol $scheme;
		proxy_redirect off;
		proxy_pass http://django;
	}
}